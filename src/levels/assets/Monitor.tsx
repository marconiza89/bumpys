/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { JSX, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_23: THREE.Mesh
    Object_21: THREE.Mesh
    Object_17: THREE.Mesh
    Object_18: THREE.Mesh
    Object_19: THREE.Mesh
  }
  materials: {
    monitor_plug: THREE.MeshStandardMaterial
    monitor_white: THREE.MeshStandardMaterial
    monitor_black: THREE.MeshStandardMaterial
    monitor_screen: THREE.MeshPhysicalMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/3DModels/monitor.glb') as any
  const material = new THREE.MeshStandardMaterial({ color: '#ffffff', transparent: true, opacity: 0.1, roughness: 0.15, metalness: 0.8 });
  return (
    <group {...props} dispose={null}>
      <group position={[0, 0.368, -2.43]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_17.geometry}
          material={materials.monitor_black}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_18.geometry}
          material={materials.monitor_white}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_19.geometry}
          material={material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_21.geometry}
          material={materials.monitor_white}
          position={[1.265, -0.148, 2.24]}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_23.geometry}
        material={materials.monitor_plug}
        position={[0.003, 2.252, -2.083]}
      />
    </group>
  )
}

useGLTF.preload('/monitor.glb')
