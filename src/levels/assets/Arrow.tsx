/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { JSX, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh
  }
  materials: {}
}

export function Arrow(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pads/3D/Arrow.glb') as any
  const material = new THREE.MeshStandardMaterial({ color: '#348546' , side: THREE.DoubleSide, emissive: "#348546", emissiveIntensity: 8.8, metalness: 0.1, roughness: 0.5 });
  return (
    <group {...props} dispose={null}>
      <group  scale={0.1} position={[0, -0.048, 0.26]} >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane.geometry}
            material={material}
            rotation={[-Math.PI / 2, Math.PI / 4, 0]}
            scale={[0.708, 1, 0.708]}
          />
      </group>
    </group>
  )
}

export function ArrowRed(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pads/3D/Arrow.glb') as any
  const material = new THREE.MeshStandardMaterial({ color: '#853448' , side: THREE.DoubleSide, emissive: "#853448", emissiveIntensity: 0.8, metalness: 0.1, roughness: 0.5 });
  return (
    <group {...props} dispose={null}>
      <group  scale={0.1} position={[0.0, -0.04, 0.26]} >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane.geometry}
            material={material}
            rotation={[-Math.PI / 2, Math.PI / 4, 0]}
            scale={[0.708, 1, 0.708]}
          />
      </group>
    </group>
  )
}

useGLTF.preload('/Arrow.glb')

export function ArrowBlue(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pads/3D/Arrow.glb') as any
  const material = new THREE.MeshStandardMaterial({ color: '#346e85' , side: THREE.DoubleSide, emissive: "#346e85", emissiveIntensity: 8.8, metalness: 0.1, roughness: 0.5 });
  return (
    <group {...props} dispose={null}>
      <group  rotation={[0,0,Math.PI]} scale={0.1} position={[0, 0.048, 0.26]} >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane.geometry}
            material={material}
            rotation={[-Math.PI / 2, Math.PI / 4, 0]}
            scale={[0.708, 1, 0.708]}
          />
      </group>
    </group>
  )
}

useGLTF.preload('/Arrow.glb')
